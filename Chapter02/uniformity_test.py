# ------------------------------------------------------------
# 線形合同法（Linear Congruential Generator: LCG）による乱数生成と
# 一様分布の検定（カイ二乗近似）＋ヒストグラム描画
# ------------------------------------------------------------

import numpy as np
import matplotlib.pyplot as plt

# ------------------------------------------------------------
# グラフの日本語フォント設定（IPAexフォントを使用）
# ------------------------------------------------------------
from matplotlib import rcParams

rcParams["font.family"] = "sans-serif"
rcParams["font.sans-serif"] = ["IPAexGothic"]  # 日本語対応フォント
rcParams["axes.unicode_minus"] = False  # マイナス記号が文字化けしないように設定

# ------------------------------------------------------------
# 乱数生成パラメータ設定
# ------------------------------------------------------------
a = 75  # 乗数 (multiplier)
c = 0  # 加算定数 (increment)
m = 2**31 - 1  # 法 (modulus) : 2^31 - 1 ≒ 2.147e9
x = 0.1  # 初期値 (seed)
u = np.array([])  # 生成された一様乱数を格納する配列

# ------------------------------------------------------------
# 線形合同法による乱数列の生成
# ------------------------------------------------------------
for i in range(0, 100):
    # LCGの再帰式: X_{n+1} = (a*X_n + c) mod m
    x = np.mod((a * x + c), m)
    # [0, 1) に正規化して u に追加
    u = np.append(u, x / m)
    # 各ステップの値を表示
    print(u[i])

# ------------------------------------------------------------
# 乱数分布の一様性の簡易検定
# ------------------------------------------------------------
N = 100  # 総サンプル数
s = 20  # 区間数（例: [0,1) を 20 区間に分割）
Ns = N / s  # 各区間に理論上一様に入るはずのサンプル数（期待値）

# 区間の境界を0.05刻みで生成（0, 0.05, 0.10, ..., 0.95）
S = np.arange(0, 1, 0.05)
# 区間ごとのカウント結果を格納
counts = np.empty(S.shape, dtype=int)

V = 0  # カイ二乗統計量のような値を格納する変数

# 各区間に入るサンプル数をカウント
for i in range(0, 20):
    # 区間 [S[i], S[i]+0.05) に入る要素を抽出
    counts[i] = len(np.where((u >= S[i]) & (u < S[i] + 0.05))[0])
    # カイ二乗統計量に似た検定値を加算
    V = V + (counts[i] - Ns) ** 2 / Ns

# 結果出力
print("R（各区間のサンプル数）= ", counts)
print("V（分布の偏り指標）= ", V)

# ------------------------------------------------------------
# 分布の可視化（棒グラフ）
# ------------------------------------------------------------
Ypos = np.arange(len(counts))  # X軸位置（0〜19）
plt.bar(Ypos, counts)  # 区間ごとのサンプル数を棒グラフ表示
plt.xlabel("区間番号 (0〜19)")
plt.ylabel("出現数")
plt.title("擬似乱数の区間ごとの出現頻度")
plt.show()
